plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.15'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'com.newus'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '1.8'
}
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // implementation 'com.oracle.database.jdbc:ojdbc8'
    // implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'

	implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
   
	implementation 'org.springframework.boot:spring-boot-starter-security'
	// https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt
	// JWT Token
	implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	
	// com.sun.xml.bind
	implementation 'com.sun.xml.bind:jaxb-impl:4.0.1'
	implementation 'com.sun.xml.bind:jaxb-core:4.0.1'
	// javax.xml.bind
	implementation 'javax.xml.bind:jaxb-api:2.4.0-b180830.0359'

	

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	// <https://mvnrepository.com/artifact/com.google.guava/guava>
	compile group: 'com.google.guava', name: 'guava', version: '28.1-jre'


	implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.3'
	testImplementation "org.mockito:mockito-core:3.+"

    compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'

    annotationProcessor 'org.projectlombok:lombok'

	// 현슬(채팅 추가)
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
	implementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'io.projectreactor:reactor-test'

}

tasks.named('test') {
	useJUnitPlatform()
}

def frontendDir = "$projectDir/src/main/frontend"

sourceSets {
	main {
		resources { srcDirs = ["$projectDir/src/main/resources"]
		}
	}
}

processResources { dependsOn "copyReactBuildFiles" }

task installReact(type: Exec) {
	workingDir "$frontendDir"
	inputs.dir "$frontendDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "audit", "fix"
		commandLine 'npm.cmd', 'install' }
	else {
		commandLine "npm", "audit", "fix" commandLine 'npm', 'install'
	}
}

task buildReact(type: Exec) {
	dependsOn "installReact"
	workingDir "$frontendDir"
	inputs.dir "$frontendDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "run-script", "build"
	} else {
		commandLine "npm", "run-script", "build"
	}
}

task copyReactBuildFiles(type: Copy) {
	dependsOn "buildReact"
	from "$frontendDir/build"
	into "$projectDir/src/main/resources/static"
}

